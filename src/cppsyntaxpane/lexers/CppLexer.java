/* The following code was generated by JFlex 1.4.3 on 10/26/18, 6:23 PM */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Copyright 2006 Arnout Engelen <arnouten[remove] at bzzt dot net>.
 * Copyright 2000-2006 Omnicore Software, Hans Kratz & Dennis Strein GbR,
 *                     Geert Bevin <gbevin[remove] at uwyn dot com>.
 * Distributed under the terms of either:
 * - the common development and distribution license (CDDL), v1.0; or
 * - the GNU Lesser General Public License, v2.1 or later
 */
package cppsyntaxpane.lexers;


import cppsyntaxpane.Lexer;
import cppsyntaxpane.Token;
import cppsyntaxpane.TokenType;

import javax.swing.text.Segment;
import java.io.CharArrayReader;
import java.io.IOException;
import java.util.List;

public final class CppLexer implements Lexer {
  private static final int YYEOF = -1;            //  denotes the end of file
  private static final int ZZ_BUFFERSIZE = 16384; // initial size of the lookahead buffer
  private static final int YYINITIAL = 0;         // lexical states
  private int offset;


  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
    0, 0
  };

  /**
   * Create and return a Token of given type.  start is obtained from {@link #yychar()}
   * and length from {@link #yylength()}
   * offset is added to start
   */
  protected Token token(TokenType type) {
    return new Token(type, yychar() + offset, yylength());
  }

  /**
   * Create and return a Token of given type and pairValue.
   * start is obtained from {@link #yychar()}
   * and length from {@link #yylength()}
   * offset is added to start
   */
  protected Token token(TokenType type, int pairValue) {
    return new Token(type, yychar() + offset, yylength(), (byte) pairValue);
  }

  public void parse(Segment segment, int ofst, List<Token> tokens) {
    try {
      CharArrayReader reader = new CharArrayReader(segment.array, segment.offset, segment.count);
      yyreset(reader);
      this.offset = ofst;
      for (Token tok = yylex(); tok != null; tok = yylex()) {
        tokens.add(tok);
      }
    } catch (IOException ex) {
      ex.printStackTrace();
    }
  }

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\10\1\0\1\2\2\0\1\1\16\10\5\0\1\66\1\55\1\5" +
      "\1\6\1\66\1\66\1\57\1\60\1\61\1\4\1\32\1\66\1\32" +
      "\1\27\1\3\1\12\7\17\2\11\1\66\1\66\1\70\1\66\1\67" +
      "\1\66\1\0\3\16\1\25\1\31\1\25\5\7\1\23\10\7\1\21" +
      "\2\7\1\14\2\7\1\64\1\56\1\65\1\66\1\51\1\0\1\35" +
      "\1\33\1\15\1\26\1\30\1\24\1\45\1\41\1\44\1\6\1\36" +
      "\1\22\1\46\1\43\1\42\1\53\1\71\1\34\1\37\1\40\1\20" +
      "\1\54\1\52\1\13\1\47\1\50\1\62\1\66\1\63\1\66\41\10" +
      "\2\0\4\6\4\0\1\6\2\0\1\10\7\0\1\6\4\0\1\6" +
      "\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6" +
      "\7\0\1\6\1\0\1\6\21\0\160\10\5\6\1\0\2\6\2\0" +
      "\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0" +
      "\24\6\1\0\123\6\1\0\213\6\1\0\5\10\2\0\246\6\1\0" +
      "\46\6\2\0\1\6\7\0\47\6\7\0\1\6\1\0\55\10\1\0" +
      "\1\10\1\0\2\10\1\0\2\10\1\0\1\10\10\0\33\6\5\0" +
      "\3\6\15\0\6\10\5\0\1\6\4\0\13\10\1\0\1\10\3\0" +
      "\53\6\37\10\4\0\2\6\1\10\143\6\1\0\1\6\10\10\1\0" +
      "\6\10\2\6\2\10\1\0\4\10\2\6\12\10\3\6\2\0\1\6" +
      "\17\0\1\10\1\6\1\10\36\6\33\10\2\0\131\6\13\10\1\6" +
      "\16\0\12\10\41\6\11\10\2\6\4\0\1\6\5\0\26\6\4\10" +
      "\1\6\11\10\1\6\3\10\1\6\5\10\22\0\31\6\3\10\104\0" +
      "\25\6\56\0\41\10\66\6\3\10\1\6\22\10\1\6\7\10\12\6" +
      "\2\10\2\0\12\10\1\0\20\6\3\10\1\0\10\6\2\0\2\6" +
      "\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\10" +
      "\1\6\7\10\2\0\2\10\2\0\3\10\1\6\10\0\1\10\4\0" +
      "\2\6\1\0\3\6\2\10\2\0\12\10\4\6\7\0\1\6\5\0" +
      "\3\10\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0" +
      "\2\6\1\0\2\6\1\0\2\6\2\0\1\10\1\0\5\10\4\0" +
      "\2\10\2\0\3\10\3\0\1\10\7\0\4\6\1\0\1\6\7\0" +
      "\14\10\3\6\1\10\13\0\3\10\1\0\11\6\1\0\3\6\1\0" +
      "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\10\1\6" +
      "\10\10\1\0\3\10\1\0\3\10\2\0\1\6\17\0\2\6\2\10" +
      "\2\0\12\10\1\0\1\6\7\0\1\6\7\0\3\10\1\0\10\6" +
      "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6" +
      "\2\0\1\10\1\6\7\10\2\0\2\10\2\0\3\10\10\0\2\10" +
      "\4\0\2\6\1\0\3\6\2\10\2\0\12\10\1\0\1\6\20\0" +
      "\1\10\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6" +
      "\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6" +
      "\4\0\5\10\3\0\3\10\1\0\4\10\2\0\1\6\6\0\1\10" +
      "\16\0\12\10\11\0\1\6\6\0\4\10\1\0\10\6\1\0\3\6" +
      "\1\0\27\6\1\0\20\6\3\0\1\6\7\10\1\0\3\10\1\0" +
      "\4\10\7\0\2\10\1\0\3\6\5\0\2\6\2\10\2\0\12\10" +
      "\21\0\3\10\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6" +
      "\1\0\5\6\2\0\1\10\1\6\7\10\1\0\3\10\1\0\4\10" +
      "\7\0\2\10\7\0\1\6\1\0\2\6\2\10\2\0\12\10\1\0" +
      "\2\6\16\0\3\10\1\0\10\6\1\0\3\6\1\0\51\6\2\0" +
      "\1\6\7\10\1\0\3\10\1\0\4\10\1\6\10\0\1\10\7\0" +
      "\3\6\2\10\2\0\12\10\12\0\6\6\2\0\2\10\1\0\22\6" +
      "\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\10" +
      "\4\0\6\10\1\0\1\10\1\0\10\10\6\0\12\10\2\0\2\10" +
      "\15\0\60\6\1\10\2\6\7\10\4\0\10\6\10\10\1\0\12\10" +
      "\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6" +
      "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6" +
      "\2\0\2\6\1\0\4\6\1\10\2\6\6\10\1\0\2\10\1\6" +
      "\2\0\5\6\1\0\1\6\1\0\6\10\2\0\12\10\2\0\4\6" +
      "\40\0\1\6\27\0\2\10\6\0\12\10\13\0\1\10\1\0\1\10" +
      "\1\0\1\10\4\0\2\10\10\6\1\0\44\6\4\0\24\10\1\0" +
      "\2\10\5\6\13\10\1\0\44\10\11\0\1\10\71\0\53\6\24\10" +
      "\1\6\12\10\6\0\6\6\4\10\4\6\3\10\1\6\3\10\2\6" +
      "\7\10\3\6\4\10\15\6\14\10\1\6\17\10\2\0\46\6\1\0" +
      "\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0" +
      "\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0" +
      "\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0" +
      "\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\10\40\0" +
      "\20\6\20\0\126\6\2\0\6\6\3\0\u026c\6\2\0\21\6\1\0" +
      "\32\6\5\0\113\6\3\0\13\6\7\0\15\6\1\0\4\6\3\10" +
      "\13\0\22\6\3\10\13\0\22\6\2\10\14\0\15\6\1\0\3\6" +
      "\1\0\2\10\14\0\64\6\40\10\3\0\1\6\3\0\2\6\1\10" +
      "\2\0\12\10\41\0\4\10\1\0\12\10\6\0\130\6\10\0\51\6" +
      "\1\10\1\6\5\0\106\6\12\0\37\6\1\0\14\10\4\0\14\10" +
      "\12\0\12\10\36\6\2\0\5\6\13\0\54\6\4\0\32\6\6\0" +
      "\12\10\46\0\27\6\5\10\4\0\65\6\12\10\1\0\35\10\2\0" +
      "\13\10\6\0\12\10\15\0\1\6\10\0\16\10\102\0\5\10\57\6" +
      "\21\10\7\6\4\0\12\10\21\0\11\10\14\0\3\10\36\6\15\10" +
      "\2\6\12\10\54\6\16\10\14\0\44\6\24\10\10\0\12\10\3\0" +
      "\3\6\12\10\44\6\122\0\3\10\1\0\25\10\4\6\1\10\4\6" +
      "\3\10\2\6\1\0\2\10\6\0\300\6\66\10\6\0\4\10\u0116\6" +
      "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6" +
      "\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6" +
      "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6" +
      "\4\0\15\6\5\0\3\6\1\0\7\6\16\0\5\10\32\0\5\10" +
      "\20\0\2\6\23\0\1\6\13\0\5\10\1\0\12\10\1\0\1\6" +
      "\15\0\1\6\20\0\15\6\3\0\37\6\21\0\15\10\4\0\1\10" +
      "\3\0\14\10\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6" +
      "\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6" +
      "\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6" +
      "\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\10\2\6" +
      "\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6" +
      "\17\0\1\10\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0" +
      "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0" +
      "\40\10\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\10\1\0\5\6" +
      "\2\0\5\6\4\0\126\6\2\0\2\10\2\0\3\6\1\0\132\6" +
      "\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0\20\6" +
      "\u0200\0\u19b6\6\112\0\u51d6\6\52\0\u048d\6\103\0\56\6\2\0\u010d\6" +
      "\3\0\20\6\12\10\2\6\24\0\57\6\1\10\4\0\12\10\1\0" +
      "\37\6\2\10\120\6\2\10\45\0\11\6\2\0\147\6\2\0\43\6" +
      "\2\0\10\6\77\0\13\6\1\10\3\6\1\10\4\6\1\10\27\6" +
      "\5\10\20\0\1\6\7\0\64\6\14\0\2\10\62\6\21\10\13\0" +
      "\12\10\6\0\22\10\6\6\3\0\1\6\1\0\1\6\2\0\12\10" +
      "\34\6\10\10\2\0\27\6\15\10\14\0\35\6\3\0\4\10\57\6" +
      "\16\10\16\0\1\6\12\10\6\0\5\6\1\10\12\6\12\10\5\6" +
      "\1\0\51\6\16\10\11\0\3\6\1\10\10\6\2\10\2\0\12\10" +
      "\6\0\27\6\3\0\1\6\3\10\62\6\1\10\1\6\3\10\2\6" +
      "\2\10\5\6\2\10\1\6\1\10\1\6\30\0\3\6\2\0\13\6" +
      "\5\10\2\0\3\6\2\10\12\0\6\6\2\0\6\6\2\0\6\6" +
      "\11\0\7\6\1\0\7\6\1\0\53\6\1\0\12\6\12\0\163\6" +
      "\10\10\1\0\2\10\2\0\12\10\6\0\u2ba4\6\14\0\27\6\4\0" +
      "\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0" +
      "\1\6\1\10\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0" +
      "\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0" +
      "\66\6\50\0\15\6\3\0\20\10\20\0\20\10\3\0\2\6\30\0" +
      "\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\10\4\0" +
      "\1\6\13\0\12\10\7\0\32\6\4\0\1\6\1\0\32\6\13\0" +
      "\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0" +
      "\2\6\3\0\2\6\22\0\3\10\4\0";

  /**
   * Translates characters to character classes
   */
  private static final char[] ZZ_CMAP = zzUnpackCMap();

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\3\2\5\6\4" +
      "\1\2\16\4\2\1\1\6\1\7\1\10\1\11\1\12" +
      "\1\13\2\2\1\14\1\0\1\3\6\0\7\5\1\0" +
      "\1\3\4\5\17\4\1\15\22\4\1\2\4\4\1\15" +
      "\12\4\1\0\1\16\3\0\2\14\11\0\1\17\3\0" +
      "\1\5\1\0\1\5\7\4\1\20\46\4\1\3\13\4" +
      "\12\0\32\4\1\5\16\4\1\0\1\17\4\0\1\4" +
      "\1\2\25\4\3\0\5\4\1\3\10\4";

  private static int[] zzUnpackAction () {
    int[] result = new int[290];
    int offset = 0;
    int ii = 0;       /* index in packed string  */
    int jj = offset;  /* index in unpacked array */
    int kk = ZZ_ACTION_PACKED_0.length();
    while (ii < kk) {
      int count = ZZ_ACTION_PACKED_0.charAt(ii++);
      int value = ZZ_ACTION_PACKED_0.charAt(ii++);
      do {
        result[jj++] = value;
      } while (--count > 0);
    }
    return result;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\72\0\256\0\350\0\u0122\0\u015c" +
      "\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c" +
      "\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc" +
      "\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc" +
      "\0\72\0\72\0\72\0\72\0\72\0\72\0\u0706\0\u0740" +
      "\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910" +
      "\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\72\0\u07ee\0\u0a6c" +
      "\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c" +
      "\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c" +
      "\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc" +
      "\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac" +
      "\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c" +
      "\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e\0\350\0\u14d8\0\u1512" +
      "\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2" +
      "\0\u0692\0\72\0\u171c\0\u06cc\0\u1756\0\u1790\0\72\0\u17ca" +
      "\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a" +
      "\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a" +
      "\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\350\0\u1d00" +
      "\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0" +
      "\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0" +
      "\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270" +
      "\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440" +
      "\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562\0\350\0\u259c\0\u25d6" +
      "\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6" +
      "\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976" +
      "\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46" +
      "\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16" +
      "\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6" +
      "\0\u2f20\0\u2f5a\0\u2f94\0\u2fce\0\u3008\0\350\0\u3042\0\u307c" +
      "\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u319e\0\u31d8\0\u3212\0\u324c" +
      "\0\u3286\0\u32c0\0\u32fa\0\u3334\0\u336e\0\72\0\u33a8\0\u33e2" +
      "\0\u341c\0\u3456\0\u3490\0\350\0\u34ca\0\u3504\0\u353e\0\u3578" +
      "\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u369a\0\u36d4\0\u370e\0\u3748" +
      "\0\u3782\0\u37bc\0\u37f6\0\u3830\0\u386a\0\u38a4\0\u38de\0\u3918" +
      "\0\u3952\0\u398c\0\u39c6\0\u3a00\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8" +
      "\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e\0\u3cb8" +
      "\0\u3cf2\0\u3d2c";

  private static int[] zzUnpackRowMap () {
    int[] result = new int[290];
    int offset = 0;
    int ii = 0;  /* index in packed string  */
    int jj = offset;  /* index in unpacked array */
    int kk = ZZ_ROWMAP_PACKED_0.length();
    while (ii < kk) {
      int high = ZZ_ROWMAP_PACKED_0.charAt(ii++) << 16;
      result[jj++] = high | ZZ_ROWMAP_PACKED_0.charAt(ii++);
    }
    return result;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10" +
      "\1\11\1\12\1\7\1\13\1\7\1\10\1\14\1\7" +
      "\1\15\1\7\1\16\1\7\1\17\1\20\1\21\1\7" +
      "\1\4\1\22\1\23\1\24\1\6\1\25\1\26\1\6" +
      "\1\27\1\30\1\31\1\32\1\33\2\6\1\7\1\34" +
      "\1\35\1\36\1\37\1\2\1\40\1\41\1\42\1\43" +
      "\1\44\1\45\1\46\1\4\1\47\1\50\1\6\75\0" +
      "\1\51\1\52\72\0\1\53\1\0\1\53\1\0\2\53" +
      "\1\0\1\53\1\0\2\53\1\54\1\53\1\55\1\53" +
      "\1\0\1\53\1\56\1\0\1\57\1\53\12\0\1\60" +
      "\4\0\1\53\1\0\1\61\24\0\21\6\1\0\2\6" +
      "\1\0\22\6\14\0\1\6\5\0\1\53\1\6\1\7" +
      "\1\6\2\7\1\6\1\7\1\6\2\7\1\6\1\7" +
      "\1\6\1\7\1\6\1\7\1\6\1\0\1\6\1\7" +
      "\1\0\16\6\1\7\3\6\14\0\1\6\5\0\1\53" +
      "\1\0\1\53\1\0\2\10\1\0\1\53\1\0\1\53" +
      "\1\10\1\62\1\63\1\64\1\65\1\66\1\67\1\66" +
      "\1\70\1\71\1\72\17\0\1\53\25\0\1\53\1\0" +
      "\1\53\1\0\1\73\1\74\1\75\1\76\1\0\1\53" +
      "\1\74\1\62\1\63\1\64\1\65\1\66\1\67\1\66" +
      "\1\70\1\71\1\72\17\0\1\53\26\0\21\6\1\0" +
      "\2\6\1\0\7\6\1\77\12\6\14\0\1\6\6\0" +
      "\14\6\1\100\4\6\1\0\2\6\1\0\2\6\1\101" +
      "\3\6\1\102\1\103\1\6\1\104\10\6\14\0\1\6" +
      "\6\0\12\6\1\105\6\6\1\0\2\6\1\0\4\6" +
      "\1\106\3\6\1\107\11\6\14\0\1\6\6\0\21\6" +
      "\1\0\2\6\1\0\7\6\1\110\12\6\14\0\1\6" +
      "\6\0\14\6\1\111\4\6\1\0\2\6\1\0\1\6" +
      "\1\112\1\113\4\6\1\114\12\6\14\0\1\6\6\0" +
      "\21\6\1\0\1\115\1\6\1\0\7\6\1\116\12\6" +
      "\14\0\1\6\11\0\2\70\4\0\1\70\60\0\5\6" +
      "\1\117\6\6\1\120\4\6\1\0\2\6\1\0\10\6" +
      "\1\121\11\6\14\0\1\6\6\0\21\6\1\0\2\6" +
      "\1\0\1\6\1\122\5\6\1\123\1\6\1\124\10\6" +
      "\14\0\1\6\6\0\21\6\1\0\1\125\1\6\1\0" +
      "\22\6\14\0\1\6\6\0\21\6\1\0\2\6\1\0" +
      "\10\6\1\126\11\6\14\0\1\6\6\0\21\6\1\0" +
      "\1\127\1\6\1\0\2\6\1\130\2\6\1\131\1\132" +
      "\2\6\1\133\5\6\1\134\2\6\14\0\1\6\6\0" +
      "\21\6\1\0\1\135\1\6\1\0\1\6\1\136\4\6" +
      "\1\137\5\6\1\140\5\6\14\0\1\6\6\0\21\6" +
      "\1\0\2\6\1\0\1\6\1\141\16\6\1\142\1\6" +
      "\14\0\1\6\6\0\21\6\1\0\1\143\1\6\1\0" +
      "\2\6\1\144\4\6\1\145\12\6\14\0\1\6\6\0" +
      "\16\6\1\146\2\6\1\0\2\6\1\0\10\6\1\147" +
      "\11\6\14\0\1\6\6\0\21\6\1\0\2\6\1\0" +
      "\7\6\1\150\12\6\14\0\1\6\6\0\12\6\1\151" +
      "\6\6\1\0\2\6\1\0\22\6\14\0\1\6\6\0" +
      "\7\6\1\152\11\6\1\0\2\6\1\0\6\6\1\153" +
      "\13\6\14\0\1\6\6\0\12\6\1\154\6\6\1\0" +
      "\2\6\1\0\1\6\1\155\20\6\14\0\1\6\6\0" +
      "\21\6\1\0\2\6\1\0\2\6\1\156\4\6\1\157" +
      "\1\6\1\160\10\6\14\0\1\6\2\161\1\162\52\161" +
      "\1\162\1\163\13\161\2\164\1\162\53\164\1\165\1\162" +
      "\12\164\67\0\1\4\72\0\1\4\1\0\1\51\1\166" +
      "\1\167\67\51\4\170\1\171\65\170\5\0\1\53\1\0" +
      "\1\53\1\0\2\53\1\0\1\53\1\0\2\53\1\0" +
      "\1\53\1\0\1\53\1\0\1\53\3\0\1\53\17\0" +
      "\1\53\57\0\1\172\3\0\1\173\72\0\1\174\55\0" +
      "\1\175\63\0\1\176\11\0\1\177\6\0\1\200\52\0" +
      "\1\201\16\0\1\202\2\0\1\203\57\0\1\204\55\0" +
      "\2\66\2\64\53\0\1\53\1\0\1\53\1\0\2\53" +
      "\1\0\1\53\1\0\2\53\1\66\1\67\1\64\1\65" +
      "\1\0\1\53\3\0\1\53\17\0\1\53\40\0\2\66" +
      "\55\0\1\53\1\0\1\53\1\0\2\53\1\0\1\53" +
      "\1\0\2\53\1\66\1\67\1\0\1\53\1\0\1\53" +
      "\3\0\1\53\17\0\1\53\31\0\2\70\4\0\1\70" +
      "\4\0\3\66\1\0\2\71\51\0\2\205\4\0\1\205" +
      "\12\0\1\206\44\0\1\53\1\0\1\53\1\0\2\207" +
      "\1\0\1\53\1\0\1\53\1\207\1\0\1\53\1\0" +
      "\1\53\1\0\1\53\3\0\1\53\1\206\16\0\1\53" +
      "\25\0\1\53\1\0\1\53\1\0\2\73\1\0\1\53" +
      "\1\0\1\53\1\73\1\0\1\53\1\0\1\53\1\66" +
      "\1\67\1\66\1\70\1\71\1\72\17\0\1\53\25\0" +
      "\1\53\1\0\1\53\1\0\1\73\1\74\1\0\1\53" +
      "\1\0\1\53\1\74\1\62\1\63\1\64\1\65\1\66" +
      "\1\67\1\66\1\70\1\71\1\72\17\0\1\53\31\0" +
      "\2\75\2\0\3\75\2\62\2\64\3\75\1\0\2\75" +
      "\1\0\1\75\1\0\1\75\41\0\1\53\1\0\1\53" +
      "\1\0\2\76\1\0\1\53\1\75\2\76\1\62\1\63" +
      "\1\64\1\65\1\75\1\76\1\75\1\0\1\75\1\76" +
      "\1\0\1\75\1\0\1\75\13\0\1\53\26\0\21\6" +
      "\1\0\2\6\1\0\1\6\1\141\20\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\2\6\1\210\17\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\4\6" +
      "\1\211\1\212\14\6\14\0\1\6\6\0\21\6\1\0" +
      "\2\6\1\0\2\6\1\213\17\6\14\0\1\6\6\0" +
      "\12\6\1\214\6\6\1\0\2\6\1\0\10\6\1\215" +
      "\2\6\1\216\6\6\14\0\1\6\6\0\21\6\1\0" +
      "\2\6\1\0\10\6\1\217\11\6\14\0\1\6\6\0" +
      "\21\6\1\0\2\6\1\0\11\6\1\220\10\6\14\0" +
      "\1\6\6\0\21\6\1\0\2\6\1\0\11\6\1\221" +
      "\10\6\14\0\1\6\6\0\21\6\1\0\2\6\1\0" +
      "\4\6\1\222\4\6\1\223\10\6\14\0\1\6\6\0" +
      "\21\6\1\0\2\6\1\0\10\6\1\224\11\6\14\0" +
      "\1\6\6\0\21\6\1\0\2\6\1\0\7\6\1\225" +
      "\12\6\14\0\1\6\6\0\21\6\1\0\2\6\1\0" +
      "\11\6\1\226\10\6\14\0\1\6\6\0\14\6\1\227" +
      "\4\6\1\0\2\6\1\0\22\6\14\0\1\6\6\0" +
      "\21\6\1\0\2\6\1\0\1\6\1\146\20\6\14\0" +
      "\1\6\6\0\14\6\1\230\1\6\1\231\2\6\1\0" +
      "\2\6\1\0\22\6\14\0\1\6\6\0\12\6\1\232" +
      "\6\6\1\0\2\6\1\0\22\6\14\0\1\6\6\0" +
      "\21\6\1\0\2\6\1\0\5\6\1\233\12\6\1\234" +
      "\1\6\14\0\1\6\6\0\21\6\1\0\2\6\1\0" +
      "\4\6\1\211\15\6\14\0\1\6\6\0\12\6\1\235" +
      "\6\6\1\0\2\6\1\0\22\6\14\0\1\6\6\0" +
      "\21\6\1\0\1\236\1\6\1\0\22\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\7\6\1\237\12\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\5\6" +
      "\1\240\14\6\14\0\1\6\6\0\21\6\1\0\2\6" +
      "\1\0\5\6\1\241\4\6\1\242\7\6\14\0\1\6" +
      "\6\0\20\6\1\141\1\0\2\6\1\0\22\6\14\0" +
      "\1\6\6\0\14\6\1\243\4\6\1\0\2\6\1\0" +
      "\2\6\1\244\17\6\14\0\1\6\6\0\16\6\1\245" +
      "\2\6\1\0\2\6\1\0\22\6\14\0\1\6\6\0" +
      "\21\6\1\0\2\6\1\0\1\6\1\246\1\247\17\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\7\6" +
      "\1\250\12\6\14\0\1\6\6\0\21\6\1\0\2\6" +
      "\1\0\12\6\1\251\2\6\1\252\4\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\11\6\1\253\10\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\13\6" +
      "\1\254\6\6\14\0\1\6\6\0\12\6\1\255\6\6" +
      "\1\0\2\6\1\0\14\6\1\146\5\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\1\6\1\256\7\6" +
      "\1\257\10\6\14\0\1\6\6\0\21\6\1\0\2\6" +
      "\1\0\20\6\1\260\1\6\14\0\1\6\6\0\21\6" +
      "\1\0\2\6\1\0\16\6\1\261\3\6\14\0\1\6" +
      "\6\0\21\6\1\0\1\262\1\6\1\0\22\6\14\0" +
      "\1\6\6\0\21\6\1\0\2\6\1\0\17\6\1\146" +
      "\2\6\14\0\1\6\6\0\21\6\1\0\2\6\1\0" +
      "\13\6\1\263\6\6\14\0\1\6\6\0\21\6\1\0" +
      "\2\6\1\0\5\6\1\141\3\6\1\264\10\6\14\0" +
      "\1\6\6\0\14\6\1\265\4\6\1\0\2\6\1\0" +
      "\5\6\1\266\14\6\14\0\1\6\6\0\21\6\1\0" +
      "\2\6\1\0\5\6\1\267\14\6\14\0\1\6\6\0" +
      "\21\6\1\0\2\6\1\0\5\6\1\270\14\6\14\0" +
      "\1\6\6\0\21\6\1\0\2\6\1\0\6\6\1\271" +
      "\13\6\14\0\1\6\6\0\21\6\1\0\2\6\1\0" +
      "\11\6\1\272\10\6\14\0\1\6\6\0\21\6\1\0" +
      "\2\6\1\0\1\273\21\6\14\0\1\6\6\0\21\6" +
      "\1\0\2\6\1\0\7\6\1\274\1\6\1\275\10\6" +
      "\14\0\1\6\6\0\14\6\1\276\4\6\1\0\2\6" +
      "\1\0\22\6\14\0\1\6\6\0\14\6\1\277\4\6" +
      "\1\0\2\6\1\0\11\6\1\300\10\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\1\6\1\301\20\6" +
      "\14\0\1\6\2\161\1\162\67\161\2\164\1\162\67\164" +
      "\2\0\1\167\67\0\4\170\1\302\65\170\3\0\1\167" +
      "\1\171\131\0\1\303\53\0\1\304\106\0\1\305\52\0" +
      "\1\55\104\0\1\305\4\0\1\306\61\0\1\307\63\0" +
      "\1\310\71\0\1\304\14\0\1\173\43\0\1\311\127\0" +
      "\1\312\53\0\1\313\45\0\2\205\4\0\1\205\4\0" +
      "\3\66\54\0\2\205\4\0\1\205\57\0\1\53\1\0" +
      "\1\53\1\0\2\207\1\0\1\53\1\0\1\53\1\207" +
      "\1\0\1\53\1\0\1\53\1\66\1\67\1\66\2\0" +
      "\1\53\17\0\1\53\26\0\21\6\1\0\2\6\1\0" +
      "\4\6\1\257\15\6\14\0\1\6\6\0\21\6\1\0" +
      "\1\146\1\6\1\0\22\6\14\0\1\6\6\0\7\6" +
      "\1\314\11\6\1\0\2\6\1\0\22\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\1\6\1\266\20\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\5\6" +
      "\1\217\14\6\14\0\1\6\6\0\21\6\1\0\2\6" +
      "\1\0\4\6\1\315\1\316\14\6\14\0\1\6\6\0" +
      "\21\6\1\0\2\6\1\0\20\6\1\317\1\6\14\0" +
      "\1\6\6\0\20\6\1\146\1\0\2\6\1\0\22\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\10\6" +
      "\1\320\11\6\14\0\1\6\6\0\21\6\1\0\2\6" +
      "\1\0\11\6\1\321\10\6\14\0\1\6\6\0\21\6" +
      "\1\0\2\6\1\0\7\6\1\322\12\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\12\6\1\266\7\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\2\6" +
      "\1\315\17\6\14\0\1\6\6\0\21\6\1\0\1\323" +
      "\1\6\1\0\22\6\14\0\1\6\6\0\21\6\1\0" +
      "\2\6\1\0\4\6\1\255\15\6\14\0\1\6\6\0" +
      "\21\6\1\0\1\324\1\6\1\0\22\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\2\6\1\325\17\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\1\326" +
      "\21\6\14\0\1\6\6\0\21\6\1\0\1\327\1\6" +
      "\1\0\22\6\14\0\1\6\6\0\14\6\1\330\4\6" +
      "\1\0\2\6\1\0\7\6\1\250\12\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\13\6\1\146\6\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\2\6" +
      "\1\331\17\6\14\0\1\6\6\0\14\6\1\266\4\6" +
      "\1\0\2\6\1\0\22\6\14\0\1\6\6\0\21\6" +
      "\1\0\2\6\1\0\2\6\1\332\4\6\1\333\12\6" +
      "\14\0\1\6\6\0\12\6\1\334\6\6\1\0\2\6" +
      "\1\0\22\6\14\0\1\6\6\0\21\6\1\0\2\6" +
      "\1\0\11\6\1\335\10\6\14\0\1\6\6\0\21\6" +
      "\1\0\1\336\1\6\1\0\22\6\14\0\1\6\6\0" +
      "\14\6\1\337\4\6\1\0\2\6\1\0\22\6\14\0" +
      "\1\6\6\0\21\6\1\0\1\340\1\6\1\0\22\6" +
      "\14\0\1\6\6\0\12\6\1\341\6\6\1\0\2\6" +
      "\1\0\22\6\14\0\1\6\6\0\21\6\1\0\2\6" +
      "\1\0\5\6\1\342\14\6\14\0\1\6\6\0\21\6" +
      "\1\0\2\6\1\0\1\6\1\315\20\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\10\6\1\343\11\6" +
      "\14\0\1\6\6\0\21\6\1\0\1\344\1\6\1\0" +
      "\22\6\14\0\1\6\6\0\21\6\1\0\2\6\1\0" +
      "\5\6\1\212\14\6\14\0\1\6\6\0\21\6\1\0" +
      "\2\6\1\0\20\6\1\345\1\6\14\0\1\6\6\0" +
      "\21\6\1\0\1\346\1\6\1\0\22\6\14\0\1\6" +
      "\6\0\21\6\1\0\1\347\1\6\1\0\7\6\1\143" +
      "\12\6\14\0\1\6\6\0\21\6\1\0\2\6\1\0" +
      "\4\6\1\146\15\6\14\0\1\6\6\0\21\6\1\0" +
      "\1\350\1\6\1\0\22\6\14\0\1\6\6\0\21\6" +
      "\1\0\1\351\1\6\1\0\22\6\14\0\1\6\6\0" +
      "\21\6\1\0\2\6\1\0\1\6\1\352\20\6\14\0" +
      "\1\6\6\0\21\6\1\0\1\353\1\6\1\0\22\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\10\6" +
      "\1\354\11\6\14\0\1\6\6\0\21\6\1\0\2\6" +
      "\1\0\11\6\1\355\10\6\14\0\1\6\6\0\21\6" +
      "\1\0\2\6\1\0\7\6\1\146\12\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\2\6\1\356\17\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\2\6" +
      "\1\357\17\6\14\0\1\6\6\0\14\6\1\211\4\6" +
      "\1\0\2\6\1\0\22\6\14\0\1\6\6\0\14\6" +
      "\1\360\4\6\1\0\2\6\1\0\22\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\5\6\1\361\14\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\21\6" +
      "\1\362\14\0\1\6\6\0\12\6\1\211\6\6\1\0" +
      "\2\6\1\0\22\6\14\0\1\6\6\0\21\6\1\0" +
      "\2\6\1\0\2\6\1\363\17\6\14\0\1\6\6\0" +
      "\20\6\1\266\1\0\2\6\1\0\22\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\5\6\1\364\14\6" +
      "\14\0\1\6\3\170\1\167\1\302\65\170\43\0\1\365" +
      "\56\0\1\306\71\0\1\366\65\0\1\366\107\0\1\367" +
      "\73\0\1\306\47\0\1\370\111\0\1\371\74\0\1\372" +
      "\32\0\21\6\1\0\2\6\1\0\6\6\1\146\13\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\5\6" +
      "\1\266\14\6\14\0\1\6\6\0\21\6\1\0\2\6" +
      "\1\0\11\6\1\373\10\6\14\0\1\6\6\0\14\6" +
      "\1\374\4\6\1\0\2\6\1\0\22\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\12\6\1\146\7\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\12\6" +
      "\1\251\7\6\14\0\1\6\6\0\21\6\1\0\2\6" +
      "\1\0\10\6\1\266\11\6\14\0\1\6\6\0\21\6" +
      "\1\0\2\6\1\0\10\6\1\220\11\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\5\6\1\211\14\6" +
      "\14\0\1\6\6\0\12\6\1\375\6\6\1\0\2\6" +
      "\1\0\22\6\14\0\1\6\6\0\14\6\1\376\4\6" +
      "\1\0\2\6\1\0\22\6\14\0\1\6\6\0\21\6" +
      "\1\0\2\6\1\0\1\6\1\322\20\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\11\6\1\377\10\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\3\6" +
      "\1\146\16\6\14\0\1\6\6\0\21\6\1\0\2\6" +
      "\1\0\10\6\1\u0100\11\6\14\0\1\6\6\0\21\6" +
      "\1\0\2\6\1\0\1\6\1\374\20\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\1\6\1\u0101\20\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\4\6" +
      "\1\u0102\15\6\14\0\1\6\6\0\7\6\1\u0103\11\6" +
      "\1\0\2\6\1\0\22\6\14\0\1\6\6\0\21\6" +
      "\1\0\1\220\1\6\1\0\22\6\14\0\1\6\6\0" +
      "\7\6\1\u0104\11\6\1\0\2\6\1\0\22\6\14\0" +
      "\1\6\6\0\7\6\1\315\11\6\1\0\2\6\1\0" +
      "\22\6\14\0\1\6\6\0\21\6\1\0\2\6\1\0" +
      "\11\6\1\u0105\10\6\14\0\1\6\6\0\21\6\1\0" +
      "\1\300\1\6\1\0\22\6\14\0\1\6\6\0\21\6" +
      "\1\0\2\6\1\0\7\6\1\u0106\12\6\14\0\1\6" +
      "\6\0\14\6\1\u0107\4\6\1\0\2\6\1\0\22\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\2\6" +
      "\1\220\17\6\14\0\1\6\6\0\20\6\1\u0108\1\0" +
      "\2\6\1\0\10\6\1\u0109\1\220\10\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\22\6\14\0\1\374" +
      "\6\0\21\6\1\0\2\6\1\0\2\6\1\u010a\17\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\4\6" +
      "\1\u010b\15\6\14\0\1\6\6\0\14\6\1\265\4\6" +
      "\1\0\2\6\1\0\22\6\14\0\1\6\6\0\21\6" +
      "\1\0\2\6\1\0\10\6\1\211\11\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\1\272\21\6\14\0" +
      "\1\6\6\0\21\6\1\0\2\6\1\0\1\6\1\u010c" +
      "\20\6\14\0\1\6\6\0\21\6\1\0\2\6\1\0" +
      "\11\6\1\u010d\10\6\14\0\1\6\6\0\21\6\1\0" +
      "\1\u010e\1\6\1\0\22\6\14\0\1\6\6\0\21\6" +
      "\1\0\2\6\1\0\2\6\1\u010f\17\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\5\6\1\u0110\14\6" +
      "\14\0\1\6\6\0\12\6\1\u0111\6\6\1\0\2\6" +
      "\1\0\22\6\14\0\1\6\45\0\1\366\60\0\1\366" +
      "\55\0\1\u0112\105\0\1\u0113\103\0\1\u0114\31\0\21\6" +
      "\1\0\2\6\1\0\10\6\1\276\11\6\14\0\1\6" +
      "\6\0\14\6\1\u0115\4\6\1\0\2\6\1\0\22\6" +
      "\14\0\1\6\6\0\21\6\1\0\1\266\1\6\1\0" +
      "\22\6\14\0\1\6\6\0\7\6\1\u0116\11\6\1\0" +
      "\2\6\1\0\22\6\14\0\1\6\6\0\20\6\1\374" +
      "\1\0\2\6\1\0\22\6\14\0\1\6\6\0\21\6" +
      "\1\0\2\6\1\0\10\6\1\146\11\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\5\6\1\u0117\14\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\5\6" +
      "\1\u0118\14\6\14\0\1\6\6\0\21\6\1\0\2\6" +
      "\1\0\2\6\1\u0119\17\6\14\0\1\6\6\0\7\6" +
      "\1\u011a\11\6\1\0\2\6\1\0\22\6\14\0\1\6" +
      "\6\0\16\6\1\146\2\6\1\0\2\6\1\0\22\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\2\6" +
      "\1\324\17\6\14\0\1\6\6\0\21\6\1\0\1\u0106" +
      "\1\6\1\0\22\6\14\0\1\6\6\0\21\6\1\0" +
      "\2\6\1\0\2\6\1\u011b\17\6\14\0\1\6\6\0" +
      "\21\6\1\0\2\6\1\0\5\6\1\u011c\14\6\14\0" +
      "\1\6\6\0\21\6\1\0\2\6\1\0\20\6\1\u011d" +
      "\1\6\14\0\1\6\6\0\21\6\1\0\2\6\1\0" +
      "\16\6\1\315\3\6\14\0\1\6\6\0\7\6\1\266" +
      "\11\6\1\0\2\6\1\0\22\6\14\0\1\6\6\0" +
      "\7\6\1\u011e\11\6\1\0\2\6\1\0\22\6\14\0" +
      "\1\6\6\0\21\6\1\0\2\6\1\0\5\6\1\376" +
      "\14\6\14\0\1\6\6\0\21\6\1\0\2\6\1\0" +
      "\11\6\1\326\10\6\14\0\1\6\6\0\21\6\1\0" +
      "\2\6\1\0\2\6\1\u011f\17\6\14\0\1\6\26\0" +
      "\1\305\103\0\1\366\66\0\1\366\42\0\21\6\1\0" +
      "\2\6\1\0\5\6\1\146\14\6\14\0\1\6\6\0" +
      "\21\6\1\0\2\6\1\0\11\6\1\315\10\6\14\0" +
      "\1\6\6\0\21\6\1\0\1\213\1\6\1\0\22\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\2\6" +
      "\1\u0120\17\6\14\0\1\6\6\0\21\6\1\0\2\6" +
      "\1\0\4\6\1\u0115\15\6\14\0\1\6\6\0\21\6" +
      "\1\0\2\6\1\0\16\6\1\340\3\6\14\0\1\6" +
      "\6\0\21\6\1\0\2\6\1\0\13\6\1\211\6\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\7\6" +
      "\1\333\12\6\14\0\1\6\6\0\21\6\1\0\2\6" +
      "\1\0\2\6\1\u0121\17\6\14\0\1\6\6\0\21\6" +
      "\1\0\2\6\1\0\5\6\1\343\14\6\14\0\1\6" +
      "\6\0\14\6\1\146\4\6\1\0\2\6\1\0\22\6" +
      "\14\0\1\6\6\0\21\6\1\0\2\6\1\0\10\6" +
      "\1\u0122\11\6\14\0\1\6\6\0\7\6\1\211\11\6" +
      "\1\0\2\6\1\0\22\6\14\0\1\6\6\0\21\6" +
      "\1\0\2\6\1\0\14\6\1\146\5\6\14\0\1\6";

  private static int[] zzUnpackTrans () {
    int[] result = new int[15718];
    int offset = 0;
    int ii = 0;       /* index in packed string  */
    int jj = offset;  /* index in unpacked array */
    int kk = ZZ_TRANS_PACKED_0.length();
    while (ii < kk) {
      int count = ZZ_TRANS_PACKED_0.charAt(ii++);
      int value = ZZ_TRANS_PACKED_0.charAt(ii++);
      value--;
      do {
        result[jj++] = value;
      } while (--count > 0);
    }
    return result;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\34\1\6\11\3\1\1\0" +
      "\1\1\6\0\4\1\1\11\2\1\1\0\67\1\1\0" +
      "\1\11\3\0\1\1\1\11\11\0\1\1\3\0\1\1" +
      "\1\0\73\1\12\0\51\1\1\0\1\11\4\0\27\1" +
      "\3\0\16\1";

  private static int[] zzUnpackAttribute () {
    int[] result = new int[290];
    int offset = 0;
    int ii = 0;       /* index in packed string  */
    int jj = offset;  /* index in unpacked array */
    int kk = ZZ_ATTRIBUTE_PACKED_0.length();
    while (ii < kk) {
      int count = ZZ_ATTRIBUTE_PACKED_0.charAt(ii++);
      int value = ZZ_ATTRIBUTE_PACKED_0.charAt(ii++);
      do {
        result[jj++] = value;
      } while (--count > 0);
    }
    return result;
  }

  /**
   * the input device
   */
  private java.io.Reader zzReader;

  /**
   * the current lexical state
   */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is
   * the source of the yytext() string
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /**
   * the textposition at the last accepting state
   */
  private int zzMarkedPos;

  /**
   * the current text position in the buffer
   */
  private int zzCurrentPos;

  /**
   * startRead marks the beginning of the yytext() string in the buffer
   */
  private int zzStartRead;

  /**
   * endRead marks the last character in the buffer, that has been read
   * from input
   */
  private int zzEndRead;

  /**
   * the number of characters up to the start of the matched text
   */
  private int yychar;

  /**
   * zzAtEOF == true <=> the scanner is at the EOF
   */
  private boolean zzAtEOF;

  /* user code: */

  public CppLexer () {
    super();
  }

  private int yychar () {
    return yychar;
  }

  private static final byte PARAN = 1;
  private static final byte BRACKET = 2;
  private static final byte CURLY = 3;


  /**
   * Unpacks the compressed character translation table.
   *
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap () {
    char[] map = new char[0x10000];
    int ii = 0;  /* index in packed string  */
    int jj = 0;  /* index in unpacked array */
    while (ii < 2292) {
      int count = CppLexer.ZZ_CMAP_PACKED.charAt(ii++);
      char value = CppLexer.ZZ_CMAP_PACKED.charAt(ii++);
      do {
        map[jj++] = value;
      } while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return <code>false</code>, iff there was new input.
   * @throws java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill () throws java.io.IOException {
    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
        zzBuffer, 0,
        zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }
    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }
    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);
    if (numRead > 0) {
      zzEndRead += numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }
    }
    // numRead < 0
    return true;
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   * <p>
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader the new input stream
   */
  private void yyreset (java.io.Reader reader) {
    zzReader = reader;
    zzAtEOF = false;
    /*
     * denotes if the user-EOF-code has already been executed
     */
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yychar = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the length of the matched text region.
   */
  private int yylength () {
    return zzMarkedPos - zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   * <p>
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   * <p>
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   */
  private void zzScanError () {
    String message;
    try {
      message = ZZ_ERROR_MSG[CppLexer.ZZ_NO_MATCH];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }
    throw new Error(message);
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @throws java.io.IOException if any I/O-Error occurs
   */
  private Token yylex () throws java.io.IOException {
    int zzInput;
    int zzAction;
    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    while (true) {
      zzMarkedPosL = zzMarkedPos;
      yychar += zzMarkedPosL - zzStartRead;
      zzAction = -1;
      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      /*
       * the current state of the DFA
       */
      int zzState = ZZ_LEXSTATE[zzLexicalState];
      zzForAction:
      {
        while (true) {
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = zzBufferL[zzCurrentPosL++];
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = ZZ_TRANS[ZZ_ROWMAP[zzState] + ZZ_CMAP[zzInput]];
          if (zzNext == -1) {
            break zzForAction;
          }
          zzState = zzNext;

          int zzAttributes = ZZ_ATTRIBUTE[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) {
              break zzForAction;
            }
          }
        }
      }
      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
      case 16: {
        return token(TokenType.TYPE2);
      }
      case 17:
        break;
      case 13: {
        return token(TokenType.KEYWORD);
      }
      case 18:
        break;
      case 8: {
        return token(TokenType.OPERATOR, CURLY);
      }
      case 19:
        break;
      case 10: {
        return token(TokenType.OPERATOR, BRACKET);
      }
      case 20:
        break;
      case 2: {
        return token(TokenType.OPERATOR);
      }
      case 21:
        break;
      case 7: {
        return token(TokenType.OPERATOR, -PARAN);
      }
      case 22:
        break;
      case 15: {
        return token(TokenType.KEYWORD2);
      }
      case 23:
        break;
      case 4: {
        return token(TokenType.IDENTIFIER);
      }
      case 24:
        break;
      case 6: {
        return token(TokenType.OPERATOR, PARAN);
      }
      case 25:
        break;
      case 14: {
        return token(TokenType.STRING);
      }
      case 26:
        break;
      case 12: {
        return token(TokenType.COMMENT);
      }
      case 27:
        break;
      case 11: {
        return token(TokenType.OPERATOR, -BRACKET);
      }
      case 28:
        break;
      case 9: {
        return token(TokenType.OPERATOR, -CURLY);
      }
      case 29:
        break;
      case 5: {
        return token(TokenType.NUMBER);
      }
      case 30:
        break;
      case 3: {
        return token(TokenType.TYPE);
      }
      case 31:
        break;
      case 1:
      case 32:
        break;
      default:
        if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
          zzAtEOF = true;
          return null;
        } else {
          zzScanError();
        }
      }
    }
  }
}
